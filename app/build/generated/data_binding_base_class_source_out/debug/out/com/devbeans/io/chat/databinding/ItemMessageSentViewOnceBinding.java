// Generated by view binder compiler. Do not edit!
package com.devbeans.io.chat.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.devbeans.io.chat.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemMessageSentViewOnceBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView editedText;

  @NonNull
  public final TextView editedTextCon;

  @NonNull
  public final ImageView ivForwarded;

  @NonNull
  public final LinearLayout layoutForwardedTextSent;

  @NonNull
  public final TextView messageText0;

  @NonNull
  public final TextView messageText0Con;

  @NonNull
  public final ImageView textDisappearSent;

  @NonNull
  public final ConstraintLayout textOutgoingLayoutBubbleText;

  @NonNull
  public final RelativeLayout textSendingTextMessageLayout;

  @NonNull
  public final ImageView textTextSendTick;

  @NonNull
  public final ImageView textTextSendTickCon;

  @NonNull
  public final TextView textTextviewTime;

  @NonNull
  public final TextView textTextviewTimeCon;

  @NonNull
  public final LinearLayout textTimeAndTickLayout;

  @NonNull
  public final LinearLayout textTimeAndTickLayoutCon;

  @NonNull
  public final TextView tvForwarded;

  private ItemMessageSentViewOnceBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView editedText, @NonNull TextView editedTextCon, @NonNull ImageView ivForwarded,
      @NonNull LinearLayout layoutForwardedTextSent, @NonNull TextView messageText0,
      @NonNull TextView messageText0Con, @NonNull ImageView textDisappearSent,
      @NonNull ConstraintLayout textOutgoingLayoutBubbleText,
      @NonNull RelativeLayout textSendingTextMessageLayout, @NonNull ImageView textTextSendTick,
      @NonNull ImageView textTextSendTickCon, @NonNull TextView textTextviewTime,
      @NonNull TextView textTextviewTimeCon, @NonNull LinearLayout textTimeAndTickLayout,
      @NonNull LinearLayout textTimeAndTickLayoutCon, @NonNull TextView tvForwarded) {
    this.rootView = rootView;
    this.editedText = editedText;
    this.editedTextCon = editedTextCon;
    this.ivForwarded = ivForwarded;
    this.layoutForwardedTextSent = layoutForwardedTextSent;
    this.messageText0 = messageText0;
    this.messageText0Con = messageText0Con;
    this.textDisappearSent = textDisappearSent;
    this.textOutgoingLayoutBubbleText = textOutgoingLayoutBubbleText;
    this.textSendingTextMessageLayout = textSendingTextMessageLayout;
    this.textTextSendTick = textTextSendTick;
    this.textTextSendTickCon = textTextSendTickCon;
    this.textTextviewTime = textTextviewTime;
    this.textTextviewTimeCon = textTextviewTimeCon;
    this.textTimeAndTickLayout = textTimeAndTickLayout;
    this.textTimeAndTickLayoutCon = textTimeAndTickLayoutCon;
    this.tvForwarded = tvForwarded;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemMessageSentViewOnceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemMessageSentViewOnceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_message_sent_view_once, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemMessageSentViewOnceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.editedText;
      TextView editedText = ViewBindings.findChildViewById(rootView, id);
      if (editedText == null) {
        break missingId;
      }

      id = R.id.editedText_con;
      TextView editedTextCon = ViewBindings.findChildViewById(rootView, id);
      if (editedTextCon == null) {
        break missingId;
      }

      id = R.id.iv_forwarded;
      ImageView ivForwarded = ViewBindings.findChildViewById(rootView, id);
      if (ivForwarded == null) {
        break missingId;
      }

      id = R.id.layout_forwarded_text_sent;
      LinearLayout layoutForwardedTextSent = ViewBindings.findChildViewById(rootView, id);
      if (layoutForwardedTextSent == null) {
        break missingId;
      }

      id = R.id.messageText0;
      TextView messageText0 = ViewBindings.findChildViewById(rootView, id);
      if (messageText0 == null) {
        break missingId;
      }

      id = R.id.messageText0_con;
      TextView messageText0Con = ViewBindings.findChildViewById(rootView, id);
      if (messageText0Con == null) {
        break missingId;
      }

      id = R.id.text_disappear_sent;
      ImageView textDisappearSent = ViewBindings.findChildViewById(rootView, id);
      if (textDisappearSent == null) {
        break missingId;
      }

      id = R.id.text_outgoing_layout_bubble_text;
      ConstraintLayout textOutgoingLayoutBubbleText = ViewBindings.findChildViewById(rootView, id);
      if (textOutgoingLayoutBubbleText == null) {
        break missingId;
      }

      id = R.id.text_sendingTextMessageLayout;
      RelativeLayout textSendingTextMessageLayout = ViewBindings.findChildViewById(rootView, id);
      if (textSendingTextMessageLayout == null) {
        break missingId;
      }

      id = R.id.text_text_sendTick;
      ImageView textTextSendTick = ViewBindings.findChildViewById(rootView, id);
      if (textTextSendTick == null) {
        break missingId;
      }

      id = R.id.text_text_sendTick_con;
      ImageView textTextSendTickCon = ViewBindings.findChildViewById(rootView, id);
      if (textTextSendTickCon == null) {
        break missingId;
      }

      id = R.id.text_textview_time;
      TextView textTextviewTime = ViewBindings.findChildViewById(rootView, id);
      if (textTextviewTime == null) {
        break missingId;
      }

      id = R.id.text_textview_time_con;
      TextView textTextviewTimeCon = ViewBindings.findChildViewById(rootView, id);
      if (textTextviewTimeCon == null) {
        break missingId;
      }

      id = R.id.text_time_and_tick_layout;
      LinearLayout textTimeAndTickLayout = ViewBindings.findChildViewById(rootView, id);
      if (textTimeAndTickLayout == null) {
        break missingId;
      }

      id = R.id.text_time_and_tick_layout_con;
      LinearLayout textTimeAndTickLayoutCon = ViewBindings.findChildViewById(rootView, id);
      if (textTimeAndTickLayoutCon == null) {
        break missingId;
      }

      id = R.id.tv_forwarded;
      TextView tvForwarded = ViewBindings.findChildViewById(rootView, id);
      if (tvForwarded == null) {
        break missingId;
      }

      return new ItemMessageSentViewOnceBinding((RelativeLayout) rootView, editedText,
          editedTextCon, ivForwarded, layoutForwardedTextSent, messageText0, messageText0Con,
          textDisappearSent, textOutgoingLayoutBubbleText, textSendingTextMessageLayout,
          textTextSendTick, textTextSendTickCon, textTextviewTime, textTextviewTimeCon,
          textTimeAndTickLayout, textTimeAndTickLayoutCon, tvForwarded);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
